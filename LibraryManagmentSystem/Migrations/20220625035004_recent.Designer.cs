// <auto-generated />
using System;
using LibraryManagmentSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryManagmentSystem.Migrations
{
    [DbContext(typeof(LibraryManagementContext))]
    [Migration("20220625035004_recent")]
    partial class recent
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibraryManagmentSystem.Models.AccountsInfo", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Password = "alpha",
                            Role = "Student",
                            UserName = "Team Alpha"
                        });
                });

            modelBuilder.Entity("LibraryManagmentSystem.Models.AuthorInfo", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AuthorName = "JK Rowling"
                        });
                });

            modelBuilder.Entity("LibraryManagmentSystem.Models.BooksInfo", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BookTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("IssuedBooks")
                        .HasColumnType("int");

                    b.Property<int>("NoOfCopies")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            BookTitle = "Harry Potter and the Philosopher's Stone",
                            Category = "Fiction",
                            ImageURl = "/Images/books/b1.png",
                            IsAvailable = true,
                            IssuedBooks = 0,
                            NoOfCopies = 12,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 1,
                            BookTitle = "Harry Potter and the Chamber of Secrets",
                            Category = "Fiction",
                            ImageURl = "/Images/books/b2.png",
                            IsAvailable = true,
                            IssuedBooks = 0,
                            NoOfCopies = 16,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 1,
                            BookTitle = "Harry Potter and the Prisoner of Azkaban",
                            Category = "Fiction",
                            ImageURl = "/Images/books/b3.png",
                            IsAvailable = true,
                            IssuedBooks = 0,
                            NoOfCopies = 7,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 1,
                            BookTitle = "Harry Potter and the Goblet of Fire",
                            Category = "Fiction",
                            ImageURl = "/Images/books/b4.png",
                            IsAvailable = true,
                            IssuedBooks = 0,
                            NoOfCopies = 9,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 1,
                            BookTitle = "Harry Potter and the Order of the Phoenix",
                            Category = "Fiction",
                            ImageURl = "/Images/books/b5.png",
                            IsAvailable = true,
                            IssuedBooks = 0,
                            NoOfCopies = 6,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 1,
                            BookTitle = "Harry Potter and the Half Blood Prince",
                            Category = "Fiction",
                            ImageURl = "/Images/books/b6.png",
                            IsAvailable = true,
                            IssuedBooks = 0,
                            NoOfCopies = 8,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 1,
                            BookTitle = "Harry Potter and the Deathly Hallows",
                            Category = "Fiction",
                            ImageURl = "/Images/books/b7.png",
                            IsAvailable = true,
                            IssuedBooks = 0,
                            NoOfCopies = 8,
                            PublisherId = 1
                        });
                });

            modelBuilder.Entity("LibraryManagmentSystem.Models.LendRequest", b =>
                {
                    b.Property<int>("LendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<double?>("FineAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("LendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LendStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LendId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("LendRequests");
                });

            modelBuilder.Entity("LibraryManagmentSystem.Models.PublisherInfo", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PublisherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            PublisherName = "Bloomsbury Publishing"
                        });
                });

            modelBuilder.Entity("LibraryManagmentSystem.Models.BooksInfo", b =>
                {
                    b.HasOne("LibraryManagmentSystem.Models.AuthorInfo", "AuthorInfo")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagmentSystem.Models.PublisherInfo", "PublisherInfo")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorInfo");

                    b.Navigation("PublisherInfo");
                });

            modelBuilder.Entity("LibraryManagmentSystem.Models.LendRequest", b =>
                {
                    b.HasOne("LibraryManagmentSystem.Models.BooksInfo", "BooksInfo")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagmentSystem.Models.AccountsInfo", "AccountsInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountsInfo");

                    b.Navigation("BooksInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
